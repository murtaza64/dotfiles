#!/usr/bin/env bash

# Find which tmux session a given PID belongs to
# Usage: tmux-find-session <pid>

if [[ $# -eq 0 ]]; then
    echo "Usage: $0 <pid>"
    echo "Find which tmux session the given PID belongs to"
    exit 1
fi

pid="$1"

# Check if the PID exists
if ! kill -0 "$pid" 2>/dev/null; then
    echo "Error: PID $pid does not exist or is not accessible"
    exit 1
fi

# Get all tmux sessions
sessions=$(tmux list-sessions -F '#{session_name}' 2>/dev/null)

if [[ -z "$sessions" ]]; then
    echo "No tmux sessions found"
    exit 1
fi

# Function to check if a PID is a descendant of another PID
is_descendant() {
    local target_pid=$1
    local parent_pid=$2
    
    # Get all descendant PIDs using ps
    local descendants=$(ps -eo pid,ppid | awk -v parent="$parent_pid" '
        function get_children(p) {
            for (i in children[p]) {
                print children[p][i]
                get_children(children[p][i])
            }
        }
        NR > 1 { children[$2][NR] = $1 }
        END { get_children(parent) }
    ')
    
    echo "$descendants" | grep -q "^$target_pid$"
}

# Check each session for the PID
for session in $sessions; do
    # Get all panes in the session
    panes=$(tmux list-panes -a -s "$session" -F '#{pane_pid}:#{session_name}:#{window_index}:#{pane_index}' 2>/dev/null)
    
    for pane_info in $panes; do
        pane_pid=$(echo "$pane_info" | cut -d: -f1)
        session_name=$(echo "$pane_info" | cut -d: -f2)
        window_index=$(echo "$pane_info" | cut -d: -f3)
        pane_index=$(echo "$pane_info" | cut -d: -f4)
        
        # Check if the target PID is the pane PID or a descendant
        if [[ "$pid" == "$pane_pid" ]] || is_descendant "$pid" "$pane_pid"; then
            echo "PID $pid found in tmux session: $session_name (window $window_index, pane $pane_index)"
            exit 0
        fi
    done
done

echo "PID $pid is not part of any tmux session"
exit 1